/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "./common";

export declare namespace TaskContract {
  export type TaskStruct = {
    id: PromiseOrValue<BigNumberish>;
    taskText: PromiseOrValue<string>;
    isImportant: PromiseOrValue<boolean>;
    isDone: PromiseOrValue<boolean>;
    isDeleted: PromiseOrValue<boolean>;
  };

  export type TaskStructOutput = [
    BigNumber,
    string,
    boolean,
    boolean,
    boolean
  ] & {
    id: BigNumber;
    taskText: string;
    isImportant: boolean;
    isDone: boolean;
    isDeleted: boolean;
  };
}

export interface TaskContractInterface extends utils.Interface {
  functions: {
    "addTask(string)": FunctionFragment;
    "clearTasks()": FunctionFragment;
    "deleteTask(uint256)": FunctionFragment;
    "getMyTasks()": FunctionFragment;
    "makeImportant(uint256,bool)": FunctionFragment;
    "makeUnImportant(uint256,bool)": FunctionFragment;
    "toggleDone(uint256,bool)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "addTask"
      | "clearTasks"
      | "deleteTask"
      | "getMyTasks"
      | "makeImportant"
      | "makeUnImportant"
      | "toggleDone"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "addTask",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "clearTasks",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "deleteTask",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "getMyTasks",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "makeImportant",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<boolean>]
  ): string;
  encodeFunctionData(
    functionFragment: "makeUnImportant",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<boolean>]
  ): string;
  encodeFunctionData(
    functionFragment: "toggleDone",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<boolean>]
  ): string;

  decodeFunctionResult(functionFragment: "addTask", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "clearTasks", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "deleteTask", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "getMyTasks", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "makeImportant",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "makeUnImportant",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "toggleDone", data: BytesLike): Result;

  events: {
    "AddTask(address,uint256)": EventFragment;
    "DeleteTask(uint256)": EventFragment;
    "GetMyTasks()": EventFragment;
    "MakeImportant(uint256,bool)": EventFragment;
    "MakeUnImportant(uint256,bool)": EventFragment;
    "ToggleDone(uint256,bool)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "AddTask"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "DeleteTask"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "GetMyTasks"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "MakeImportant"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "MakeUnImportant"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ToggleDone"): EventFragment;
}

export interface AddTaskEventObject {
  recipient: string;
  taskId: BigNumber;
}
export type AddTaskEvent = TypedEvent<[string, BigNumber], AddTaskEventObject>;

export type AddTaskEventFilter = TypedEventFilter<AddTaskEvent>;

export interface DeleteTaskEventObject {
  taskId: BigNumber;
}
export type DeleteTaskEvent = TypedEvent<[BigNumber], DeleteTaskEventObject>;

export type DeleteTaskEventFilter = TypedEventFilter<DeleteTaskEvent>;

export interface GetMyTasksEventObject {}
export type GetMyTasksEvent = TypedEvent<[], GetMyTasksEventObject>;

export type GetMyTasksEventFilter = TypedEventFilter<GetMyTasksEvent>;

export interface MakeImportantEventObject {
  taskId: BigNumber;
  isImportant: boolean;
}
export type MakeImportantEvent = TypedEvent<
  [BigNumber, boolean],
  MakeImportantEventObject
>;

export type MakeImportantEventFilter = TypedEventFilter<MakeImportantEvent>;

export interface MakeUnImportantEventObject {
  taskId: BigNumber;
  isImportant: boolean;
}
export type MakeUnImportantEvent = TypedEvent<
  [BigNumber, boolean],
  MakeUnImportantEventObject
>;

export type MakeUnImportantEventFilter = TypedEventFilter<MakeUnImportantEvent>;

export interface ToggleDoneEventObject {
  taskId: BigNumber;
  isDone: boolean;
}
export type ToggleDoneEvent = TypedEvent<
  [BigNumber, boolean],
  ToggleDoneEventObject
>;

export type ToggleDoneEventFilter = TypedEventFilter<ToggleDoneEvent>;

export interface TaskContract extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: TaskContractInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    addTask(
      taskText: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    clearTasks(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    deleteTask(
      taskId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    getMyTasks(
      overrides?: CallOverrides
    ): Promise<[TaskContract.TaskStructOutput[]]>;

    makeImportant(
      taskId: PromiseOrValue<BigNumberish>,
      isImportant: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    makeUnImportant(
      taskId: PromiseOrValue<BigNumberish>,
      isImportant: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    toggleDone(
      taskId: PromiseOrValue<BigNumberish>,
      isDone: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;
  };

  addTask(
    taskText: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  clearTasks(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  deleteTask(
    taskId: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  getMyTasks(
    overrides?: CallOverrides
  ): Promise<TaskContract.TaskStructOutput[]>;

  makeImportant(
    taskId: PromiseOrValue<BigNumberish>,
    isImportant: PromiseOrValue<boolean>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  makeUnImportant(
    taskId: PromiseOrValue<BigNumberish>,
    isImportant: PromiseOrValue<boolean>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  toggleDone(
    taskId: PromiseOrValue<BigNumberish>,
    isDone: PromiseOrValue<boolean>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    addTask(
      taskText: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    clearTasks(overrides?: CallOverrides): Promise<void>;

    deleteTask(
      taskId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    getMyTasks(
      overrides?: CallOverrides
    ): Promise<TaskContract.TaskStructOutput[]>;

    makeImportant(
      taskId: PromiseOrValue<BigNumberish>,
      isImportant: PromiseOrValue<boolean>,
      overrides?: CallOverrides
    ): Promise<void>;

    makeUnImportant(
      taskId: PromiseOrValue<BigNumberish>,
      isImportant: PromiseOrValue<boolean>,
      overrides?: CallOverrides
    ): Promise<void>;

    toggleDone(
      taskId: PromiseOrValue<BigNumberish>,
      isDone: PromiseOrValue<boolean>,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    "AddTask(address,uint256)"(
      recipient?: null,
      taskId?: null
    ): AddTaskEventFilter;
    AddTask(recipient?: null, taskId?: null): AddTaskEventFilter;

    "DeleteTask(uint256)"(taskId?: null): DeleteTaskEventFilter;
    DeleteTask(taskId?: null): DeleteTaskEventFilter;

    "GetMyTasks()"(): GetMyTasksEventFilter;
    GetMyTasks(): GetMyTasksEventFilter;

    "MakeImportant(uint256,bool)"(
      taskId?: null,
      isImportant?: null
    ): MakeImportantEventFilter;
    MakeImportant(taskId?: null, isImportant?: null): MakeImportantEventFilter;

    "MakeUnImportant(uint256,bool)"(
      taskId?: null,
      isImportant?: null
    ): MakeUnImportantEventFilter;
    MakeUnImportant(
      taskId?: null,
      isImportant?: null
    ): MakeUnImportantEventFilter;

    "ToggleDone(uint256,bool)"(
      taskId?: null,
      isDone?: null
    ): ToggleDoneEventFilter;
    ToggleDone(taskId?: null, isDone?: null): ToggleDoneEventFilter;
  };

  estimateGas: {
    addTask(
      taskText: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    clearTasks(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    deleteTask(
      taskId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    getMyTasks(overrides?: CallOverrides): Promise<BigNumber>;

    makeImportant(
      taskId: PromiseOrValue<BigNumberish>,
      isImportant: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    makeUnImportant(
      taskId: PromiseOrValue<BigNumberish>,
      isImportant: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    toggleDone(
      taskId: PromiseOrValue<BigNumberish>,
      isDone: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    addTask(
      taskText: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    clearTasks(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    deleteTask(
      taskId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    getMyTasks(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    makeImportant(
      taskId: PromiseOrValue<BigNumberish>,
      isImportant: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    makeUnImportant(
      taskId: PromiseOrValue<BigNumberish>,
      isImportant: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    toggleDone(
      taskId: PromiseOrValue<BigNumberish>,
      isDone: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;
  };
}
